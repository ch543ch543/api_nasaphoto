{"version":3,"sources":["components/Home.js","components/Navbar.js","components/Nasaphoto.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","to","process","Navbar","apiKey","Nasaphoto","useState","photoData","setPhotoData","useEffect","a","fetch","resp","json","data","console","log","fetchphoto","media_type","src","url","alt","title","frameBorder","gesture","allow","allowFullScreen","date","explanation","App","classNAme","component","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+PAWeA,EARF,WACT,OACI,yBAAKC,UAAU,QACX,kBAAC,IAAD,CAAMA,UAAU,YAAYC,GAAMC,4BAAlC,yB,iCCOIC,EAVA,WACX,OACE,6BACI,4BACI,kBAAC,IAAD,CAAMH,UAAU,OAAOC,GAAMC,mBAA7B,mBCJTE,EAASF,2CAkDAG,EA/CG,WAAO,IAAD,EACcC,mBAAS,MADvB,mBACbC,EADa,KACFC,EADE,KAepB,OAZAC,qBAAU,WAAM,4CAGZ,8BAAAC,EAAA,sEACuBC,MAAM,+CAAiDP,GAD9E,cACUQ,EADV,gBAGuBA,EAAKC,OAH5B,OAGUC,EAHV,OAIIN,EAAaM,GACbC,QAAQC,IAAIF,GALhB,4CAHY,0DACZG,KASD,IAECV,EAGA,oCACI,kBAAC,EAAD,MACA,yBAAKP,UAAU,cACgB,UAAzBO,EAAUW,WACZ,yBAAKlB,UAAW,iBAChBmB,IAAOZ,EAAUa,IACjBC,IAAOd,EAAUe,QAEb,4BACIA,MAAQ,cACRH,IAAOZ,EAAUa,IACjBG,YAAc,IACdC,QAAU,QACVC,MAAQ,kBACRC,iBAAe,EACf1B,UAAY,UAIpB,6BACA,wBAAIA,UAAW,MAAMO,EAAUe,OAC/B,uBAAGtB,UAAW,QAAQO,EAAUoB,MAChC,uBAAG3B,UAAW,eAAeO,EAAUqB,gBAzB7B,+B,MCJXC,MAXf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAAOC,UAAWhC,EAAMiC,KAAM9B,kBAA8B+B,OAAK,IACjE,kBAAC,IAAD,CAAOF,UAAW1B,EAAW2B,KAAM9B,gCCCvBgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.925e6825.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n \nconst Home = () => {\n    return(\n        <div className='home'>\n            <Link className='home-link' to = {process.env.PUBLIC_URL + '/Nasaphoto'}>See into the stars!</Link> \n        </div>\n    )\n}   \n \nexport default Home;","import React from 'react'; \nimport { Link } from 'react-router-dom';\n\n const Navbar = () => {\n     return(\n       <div>\n           <ul>\n               <Link className='link' to = {process.env.PUBLIC_URL + '/'}>Take me Home</Link>\n           </ul>\n       </div>  \n     )\n }\n\n export default Navbar;","import React, { useState, useEffect } from 'react';\nimport Navbar from './Navbar';\n\nconst apiKey = process.env.REACT_APP_NASA_KEY;\n\n\nconst Nasaphoto = () => {\n    const [photoData, setPhotoData] = useState(null);\n\n    useEffect(() => {\n        fetchphoto();  \n\n        async function fetchphoto() {\n            const resp = await fetch('https://api.nasa.gov/planetary/apod?api_key=' + apiKey\n            );\n            const data = await resp.json();\n            setPhotoData(data);\n            console.log(data);\n        }\n    }, []);  //stop with empty array\n\n    if(!photoData) return <div />;\n\n    return(  \n        <>\n            <Navbar />\n            <div className='nasa-photo'>\n                { photoData.media_type === 'image'? (\n                <img className ='nasa-photo img'\n                src = {photoData.url}\n                alt = {photoData.title} /> \n                ):(\n                    <iframe\n                        title = \"space-video\"\n                        src = {photoData.url}\n                        frameBorder = \"0\"\n                        gesture = \"media\"\n                        allow = \"encrypted-media\"\n                        allowFullScreen\n                        className = \"photo\"\n                    />\n                    )}\n\n                <div>\n                <h1 className ='h1'>{photoData.title}</h1>\n                <p className ='date'>{photoData.date}</p>\n                <p className ='explanation'>{photoData.explanation}</p>\n                </div> \n            </div>\n        </>    \n    )\n};\n\nexport default Nasaphoto; \n\n","import React from 'react';\nimport { BrowserRouter, Route} from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport Nasaphoto from \"./components/Nasaphoto\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div classNAme='app'>\n        <Route component={Home} path={process.env.PUBLIC_URL + '/'} exact /> \n        <Route component={Nasaphoto} path={process.env.PUBLIC_URL + '/Nasaphoto'} />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}